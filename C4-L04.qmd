---
date: 2024-11-04
title: "The AR(p) process - M2L4"
subtitle: Time Series Analysis
description: "The AR(P) process, its state-space representation, the characteristic polynomial, and the forecast function"
categories: 
  - Bayesian Statistics
  - Time Series
keywords: 
  - Autoregressive Models
  - time series
  - stability
  - order of an AR process 
  - characteristic lag polynomial
  - autocorrelation function
  - ACF
  - partial autocorrelation function
  - PACF
  - smoothing
  - State Space Model
  - ARMA process
  - ARIMA
  - moving average
  - AR(p) process  
  - R code
  - notes
  - Coursera 
---

::: {.callout-note}

## Learning Objectives

- [x]  Define an **AR(p)**, or [autoregressive process of order p]{.mark} and use **R** to obtain samples from such process
- [x] Define ARIMA (autoregressive moving average) models (honors)
- [x]  Perform posterior inference for the AR(p) under the conditional likelihood and the reference prior
- [x]   Perform a full data analysis in R using an AR(p) including
   - likelihood estimation,
   - Bayesian inference,
   - model order selection,
   - forecasting.
- [x]  Explain the relationship between the *AR characteristic polynomial*, *the forecast function*, *the ACF* and *the spectral density* in the case of an AR(p)

:::

## AR(p) Definition and State-space Representation ðŸŽ¥ {#sec-arp-defn-state-space-rep}

![AR(p) process, characteristic polynomial, stability, stationarity and MA representation ](images/m2_0001.png){#fig-ar-p-state-space-representation .column-margin  group="slides" width="53mm"}

In this video we will see two important representations of the **AR(p)** process.


### AR(p) definition {#sec-arp-definition}

[**AR(p)**, shorthand, for *Auto Regressive Process of order p* which generalizes the **AR(1)** process by defining the current time step in terms of the previous $p$ time steps. We denote the number of parameter required to characterize the current value as $p$, and call it the **order** of the autoregressive process. The order tells us how many *lags* we will be considering.]{.mark}. 
[**order p**]{.column-margin}
Therefore the **AR(1)** process as a special case of the more general **AR(p)** process with $p=1$.

[**AR(P)**]{.column-margin}
We will assume AR(P) has the following structure:

$$
\textcolor{red}{y_t} = \textcolor{blue}{\phi_1} \textcolor{red}{y_{t-1}} + \textcolor{blue}{\phi_2} \textcolor{red}{y_{t-2}} + \ldots + \textcolor{blue}{\phi_p} \textcolor{red}{y_{t-p}} + \textcolor{grey}{\epsilon_t}, \qquad \textcolor{grey}{\epsilon_t} \overset{\text{iid}}{\sim} \mathcal{N}(0,v) \quad \forall t
$$ {#eq-ar-p-annotated}

where:

-   $\textcolor{red}{y_t}$ is the value of the time series at time t
-   $\textcolor{blue}{\phi_{1:p}}$ are the AR coefficients
-   $\textcolor{grey}{\epsilon_t} \overset{\text{iid}}{\sim} \mathcal{N}(0,v) \quad \forall t$  is a **white noise process** with zero mean and constant variance $v$.


### AR(p) Characteristic Polynomial {#sec-arp-characteristic-polynomial}

A central outcome of the autoregressive nature of the  **AR(p)** is due to the properties the AR characteristic polynomial $\Phi$. [$\Phi$ AR characteristic polynomial]{.column-margin} This is defined as : 

recall the backshift operator $B$ is defined as:

$$
\operatorname{B} y_t = y_{t-1}
$$ 

so that 

$$
\operatorname{B}^j y_t = y_{t-j}
$$ 

We now use the backshift operator to rewrite the **AR(p)** as a inhomogeneous linear difference equation:
$$
\begin{aligned}
       y_t &= \phi_1 y_{t-1} + \phi_2 y_{t-2} + \ldots + \phi_p y_{t-p} + \epsilon_t  && \text{(Ar(p) defn.)} \newline
       y_t &= \phi_1 \operatorname{B} y_t + \phi_2 \operatorname{B}^2 y_t + \ldots + \phi_p \operatorname{B}^p y_t + \epsilon_t && \text{(B defn.)} \newline
\epsilon_t &= y_t - \phi_1 \operatorname{B} y_t + \phi_2 \operatorname{B}^2 y_t + \ldots + \phi_p \operatorname{B}^p y_t    && \text{(rearranging)} \newline
\epsilon_t  &= (1- \phi_1 \operatorname{B} + \phi_2 \operatorname{B}^2 + \ldots + \phi_p \operatorname{B}^p) y_t            && \text{(factoring out $y_t$)}
\end{aligned}
$$ {#eq-ar-poly-derivation}
$$
\Phi(u) = 1 - \phi_1 u - \phi_2 u^2 - \ldots - \phi_p u^p \qquad \text{(Characteristic polynomial)}
$$ {#eq-ar-poly}

where:

- $u \in \mathbb{C}$ i.e. complex-valued roots
- $\phi_j$ are the AR coefficients.


::: {.callout-caution collapse="true"}
## Replacing the Backshift operator {.unnumbered}

As far as the mathematics goes I'm uncertain why we could replace the Backshift operator $B$  with the complex root $z$. 
:::

- [This polynomial and its roots tells us a lot about the process and its properties. One of the main characteristics is it allows us to think about things like **quasi-periodic behavior**, whether it's present or not in a particular **AR(p)** process. ]{.mark}
- It allows us to think about whether a process is **stationary or not**, depending on some properties related to this polynomial. 
- In particular, we are going to say that the process is **stable** if all the roots of the characteristic polynomial have a modulus greater than one. [stability condition]{.column-margin}


> Why are we interested in this autoregressive lag polynomial? 

$$
\Phi(z) = 0 \iff |z| > 1  \qquad \text{(stability condition)}
$$ {#eq-arp-stability}

- For any of the roots, it has to be the case that the modulus of that root, they have to be all outside the unit circle.

- If a process is stable, it will also be stationary.

We can show this as follows:

[If the AR(p) has all the roots of its characteristic polynomial outside the unit circle, it is *stable* and *stationary* and can be written in terms of an infinite order *moving average* process:]{.mark}


$$
y_t = \Psi(\operatorname{B}) \varepsilon_t = \sum_{j=0}^{\infty} \psi_j \varepsilon_{t-j} \quad \text {with} \ \psi_0 = 1 \quad \text{ and } \sum_{j=0}^{\infty} |\psi_j| < \infty
$$ {#eq-ar-stationary}

where:

- $\varepsilon_t$ is a white noise process with zero mean and constant variance $v$.
- $\operatorname{B}$ is the lag operator AKA the backshift operator defined by $\operatorname{B} \varepsilon_t = \varepsilon_{t-1}$. 
  This need to be applied to a time series $\varepsilon_t$ to get the lagged values.
- $\Psi(\operatorname{B})$ is the infinite order polynomial in $\operatorname{B}$ that represents a linear filter applied to the noise process.â€‹
- $\psi_t = 1$ is the weight for the white noise at time $t$.
- the constraint $\psi_0 = 1$ ensures that the current shock contributes directly to $y_t$
- the constraint on the weights $\sum_{j=0}^{\infty} |\psi_j| < \infty$ ensures that the weights decay sufficiently fast, so that the process does not explode making it is stable and therefore stationary.

::: {.callout-caution collapse="true"}
## Notation Confusion {.unnumbered}

the notation with $\psi$ a functional of operator $B$ and $\psi_i$ as constants is confusing in both the reuse if the symbol and the complexity.
:::


We can also rewrite the characteristic polynomial in terms of the reciprocal roots of the polynomial.


The zeros of the characteristic polynomial are the roots of the **AR(p)** process.

$$
\Phi(u) = \prod_{j=1}^{p} (1 - \alpha_j u) = 0  \implies u = \frac{1}{ \alpha_j} \qquad \text{(reciprocal roots)}
$$

where: 

- $\alpha_j$ are the reciprocal roots of the characteristic polynomial.

Here, $u$ is any complex valued number. 


<!--
Prado says we will show later .... where this roots have important properties.

It would be nice to state this explicitly and linked to the appropriate sections.
 -->


### State Space Representation of AR(p) {#sec-state-space-ar-p}

![A state space representation of Ar(p)](images/m2_0002.png){#fig-ar-p-state-space .column-margin  group="slides" width="53mm"}


[Another important representation of the AR(P) process, is based on a state-space representation of the process. This representation is useful because it allows us to study some important properties of the process.]{.mark} We will make some connections with these representations later when we talk about dynamic linear models, is given as follows for an AR(P). 

~~I have my y_t. I can write it as F transpose and then another vector x_t here. Then we're going to have x_t is going to be a function of x_t minus 1. That vector there is going to be an F and a G. I will describe what those are in a second. Then I'm going to have another vector here with some distribution. In our case, we are going to have a normal distribution also for that one. In the case of the AR(P), we're going to have x_t to be y_t, y_t minus 1.~~

$$
y_t = \operatorname{F}^\top \mathbf{x}_t \qquad \text{(observational equation)}
$$ {#eq-state-space-observational-equation}

where:

- $\operatorname{F}$ is a linear mapping from the state space into the state space, so it is just  vector of coefficients, specifically $F = (1, 0, \ldots, 0)^\top$ for the AR(P) process. The rank for this operator is $p$ since it has to match the dimension of the state vector $\mathbf{x}_t$.
- $\mathbf{x}_t$ is a vector with the state of the process at time $t$.

To demystify $\operatorname{F}$, it is just picking the current state from vector $\mathbf{x}_t$ with states for the p previous time steps.

$$
\mathbf{x}_t = G \mathbf{x}_{t-1} + \mathbf{w}_t \qquad \text{(state equation)}
$$ {#eq-state-space-state-equation}

where:

- $\mathbf{x}_t$ is a vector of the current state of the process.
- $G$ is a state transition matrix that describes the relationship between the current state and the previous state.
- $\mathbf{x}_{t-1}$ is a vector of the previous state of the process.
- $\mathbf{w}_t$ is a vector of *innovations* or noise at time $t$, which is assumed to be normally distributed with zero mean and constant variance. The first component is going to be the $\varepsilon_t$ and the rest of the components are going to be zero and the dimension of this vector is going to be $p$.

\index{AR(p)!state transition matrix}
and state transition matrix G

The G matrix in this representation is going to be a very important matrix, the first row is going to contain the AR parameters, the AR coefficients, and we have $p$ of those. In the block below this is an identity matrix, and a zero column on it's right.


$$
G = \begin{pmatrix}
\phi_1 & \phi_2 & \phi_3 & \dots & \phi_{p-1} & \phi_p \\
1 & 0 & 0 & \dots & 0 & 0 \\
0 & 1 & 0 & \dots & 0 & 0 \\
\vdots & \ddots & \ddots & \ddots & & \vdots \\
0 & 0 & 0 & \dots & 1 & 0
\end{pmatrix}.
$$ {#eq-ar-p-state-space-g-matrix}

This state transition matrix G is important because it is related to the characteristic polynomial, in particular, is related to the reciprocal roots representation of the characteristic polynomial that we discussed before. 
The structure of this G matrix is such that it captures the Markovian dynamics of the autoregressive process, wherein each $x_t$ is a function of $x_{t-1}$. 

The eigenvalues of this matrix correspond precisely to the reciprocal roots of the characteristic polynomial. 

Prado point out that if you perform the matrix operations described in @eq-state-space-observational-equation and @eq-state-space-state-equation, you will get back the form of your autoregressive process from the definition in @eq-ar-p-annotated

So we have given the state-space representation of an AR(p). One advantage of working with this representation is that we can use with it some definitions that apply to dynamic linear models or state-space models. One such definition is the so-called forecast function.

## Forecast Function of AR(p) ðŸŽ¥ {#sec-forecast-function-ar-p}



The forecast function, we can define it in terms of, I'm going to use here the notation f_t h to denote that is a function f that depends on the time t that you're considering, and then you're looking at forecasting h steps ahead in your time series. 

$$
\begin{aligned}
f_t(h) &= E(y_{t+h} \mid y_{1:t}) \\
       &= F^\top \mathbb{E}[x_{t+h} \mid y_{1:t}] \\
       &= F^\top G \mathbb{E}[x_{t+h-1} \mid y_{1:t}] \\
       &= F^\top G^h x_t, \quad h > 0, \quad \forall t \ge p
\end{aligned}
$$ {#eq-ar-p-forecast-function-derivation}

If you have observations up to today and you want to look at what is the forecast function five days later, you will have h equals 5 there. It's just the expected value and we can just think of this as the expected value of $y_{t+h}.$ Conditional on all the observations or all the information you have received up to time $t$. 

I'm going to write it just like this. Using the state-space representation, you can see that if I use the first equation and I think about the expected value of y_t plus h is going to be F transpose, and then I have the expected value of the vector x_t plus h in that case.
I can think of just applying this, then I would have expected value of x_t plus h given y_1 up to t.
But now when I look at the structure of x_t plus h, if I go to my second equation here, I can see that x_t plus h is going to be dependent on x_t plus h minus 1, and there is a G matrix here.
I can write this in terms of the expected value of x_t plus h, which is just G, expected value of x_t plus h minus 1, and then I also have plus expected value of the w_t's.
But because of the structure of the AR process that we defined, we said that all the Epsilon T's are independent normally distributed random variables center at zero. In this case, those are going to be all zero.
I can write down this as F transpose G, and then I have the expected value of x_t plus h minus 1 given y_1 up to t.
> If I continue with this process all the way until I get to time t, I'm going to get a product of all these G matrices here, and because we are starting with this lag h, I'm going to have the product of that G matrix h times. 
> I can write this down as F transpose G to the power of h, and then I'm going to have the expected value of, finally, I get up to here.
>
>This is simply is going to be just my x_t vector. 
> I can write this down as F transpose G^h, and then I have just my x_t. 
> Again, why do we care? Now we are going to make that connection with this matrix and the eigenstructure of this matrix. 
> I said before, one of the features of this matrix is that the eigenstructure is related to the reciprocal roots of the characteristic polynomial. 
> In particular, the eigenvalues of this matrix correspond to the reciprocal roots of the characteristic polynomial. 
> If we are working with the case in which we have exactly p different roots. 
> We have as many different roots as the order of the AR process. 
> Let's say, p distinct.
> We can write down then G in terms of its eigendecomposition. 
> I can write this down as E, a matrix Lambda here, E inverse. 
>
> Here, Lambda is going to be a diagonal matrix, you just put the reciprocal roots, I'm going to call those Alpha 1 up to Alpha p. 
> They are all different. 
> You just put them in the diagonal and you can use any order you want. 
> But the eigendecomposition, the eigenvectors, have to follow the order that you choose for the eigenvalues. 
> Then what happens is, regardless of that, you're going to have a unique G. 
> But here, the E is a matrix of eigenvectors.

> We have the power G to the power of h. 
> Using that eigendecomposition, we can get to write this in this form. 
> Whatever elements you have in the matrix of eigenvectors, they are now going to be functions of the reciprocal roots. 
> The power that appears here, which is the number of steps ahead that you want to forecast in your time series for prediction, I'm just going to have the Alphas to the power of h. 
> When I do this calculation, I can end up writing the forecast function just by doing that calculation as a sum from j equals 1 up to p of some constants. 
> Those constants are going to be related to those E matrices but the important point is that what appears here is my Alpha to the power of h.
> What this means is I'm breaking this expected value of what I'm going to see in the future in terms of a function of the reciprocal roots of the characteristic polynomial. 
> You can see that if the process is stable, is going to be stationary, all the moduli of my reciprocal roots are going to be below one. 
> This is going to decay exponentially as a function of h.
> You're going to have something that decays exponentially. 
> Depending on whether those reciprocal roots are real-valued or complex-valued, you're going to have behavior here that may be quasiperiodic for complex-valued roots or just non-quasiperiodic for the real valued roots. 
> The other thing that matters is, if you're working with a stable process, are going to have moduli smaller than one. 
> The contribution of each of the roots to these forecasts function is going to be dependent on how close that modulus of that reciprocal root is to one or minus one. 
> For roots that have relatively large values of the modulus, then they are going to have more contribution in terms of what's going to happen in the future. 
> This provides a way to interpret the AR process.

::: {.callout-note collapse="true"}
## Video Transcript {.unnumbered}

<!-- TODO: summarize this transcript -->

{{< include _C4-L04-T01.qmd >}}

:::


## Examples ðŸŽ¥

![AR(1)](images/m2_0011.png){#fig-ar1-example .column-margin  group="slides" width="53mm"}




![AR(2) two positive roots](images/m2_0012.png){#fig-ar2-two-positive-roots .column-margin  group="slides" width="53mm"}




![AR(2) complex roots](images/m2_0013.png){#fig-ar2-complex-roots .column-margin  group="slides" width="53mm"}


### **AR(1) Process**

* **State-space form**:
  $X_t = \phi X_{t-1} + \omega_t$
* **Forecast function**:
  $\mathbb{E}[y_{t+h} \mid \mathcal{F}_t] = c \cdot \phi^h$
* **Behavior**:
  Exponential decay (oscillatory if $\phi < 0$), mimicking the autocorrelation function.
* **Stability**:
  $|\phi| < 1$ (reciprocal root $1/\phi$ has modulus > 1).

### **AR(2) Process**

* **Characteristic polynomial**:
  $1 - \phi_1 z - \phi_2 z^2$
* **Three root types**:

  1. **Two real distinct reciprocal roots**:
     Forecast function:

     $$
     \mathbb{E}[y_{t+h} \mid \mathcal{F}_t] = c_{t1} \alpha_1^h + c_{t2} \alpha_2^h
     $$

     Exponential decay, dominated by root with larger modulus.

  2. **Two complex conjugate reciprocal roots**:
     Let roots be \$r e^{\pm i\omega}\$.
     Forecast function:

     $$
     \mathbb{E}[y_{t+h} \mid \mathcal{F}_t] = A_t r^h \cos(\omega h + \delta_t)
     $$

     Behavior: *Quasiperiodic* with exponential envelope.

  3. **Repeated reciprocal root (\$\alpha\$ with multiplicity 2)**:
     Forecast function:

     $$
     \mathbb{E}[y_{t+h} \mid \mathcal{F}_t] = (\alpha^h)(a_t + b_t h)
     $$

     Polynomial-exponential form due to root multiplicity.

### **Key Concepts**

* Forecast structure mirrors the **roots** of the characteristic polynomial.
* Stability depends on **reciprocal roots** (modulus < 1).
* Complex roots â†’ sinusoidal terms; repeated roots â†’ polynomial multipliers.

This analysis connects **forecast behavior** to the **algebraic properties** of AR model roots.


## ACF of the AR(p) ðŸŽ¥

![ACF of the AR(p)](images/m2_0021.png){#fig-acf-ar-p .column-margin  group="slides" width="53mm"}



For a **stationary AR(p)** process, the **autocorrelation function (ACF)** satisfies a homogeneous linear difference equation whose solution is a sum of terms involving the **reciprocal roots** of the characteristic polynomial. Key points:

* If there are $r$ distinct reciprocal roots $\alpha_1, \ldots, \alpha_r$ with multiplicities $m_1, \ldots, m_r$ such that $\sum m_j = p$, the ACF has the general form:

  $$
  \rho(h) = \sum_{j=1}^r P_j(h)\alpha_j^h,
  $$

  where each $P_j(h)$ is a polynomial of degree $m_j - 1$.

* For **distinct reciprocal roots** (common case), all $m_j = 1$, so $\rho(h)$ is a linear combination of powers of the roots.

* **AR(1)**: ACF is $\rho(h) = \phi^h$, where $\phi$ is the AR coefficient.

* **AR(2)**: Three cases arise:

  1. Two distinct real roots â†’ exponential decay.
  2. Complex conjugate roots â†’ **damped sinusoidal** behavior $r^h \cos(\omega h + \delta)$.
  3. One real root with multiplicity 2 â†’ decay with polynomial factor.

* ACF decays **exponentially** if all reciprocal roots lie inside the unit circle.

* The **Partial ACF (PACF)** of AR(p) is **zero for all lags > p**.

* PACF values can be computed recursively via the **Durbinâ€“Levinson algorithm**, using sample autocorrelations.


## Simulating data from an AR(p) ðŸŽ¥

This video goes through the code in the following sections, which simulates data from an AR(p) process and plots the sample ACF and PACF.


1. **Characteristic Roots from AR Coefficients**:

   * Given AR coefficients (e.g. for AR(8)), compute characteristic roots using `polyroot()` on the reversed sign polynomial (first term 1, followed by negative AR coefficients).
   * Reciprocal roots are obtained as $1/\text{root}$.
   * Use `Mod()` for modulus and `2Ï€ / Arg()` for approximate periods of the reciprocal roots.

2. **Example AR(8)**:

   * Yields 4 complex-conjugate pairs.
   * Most persistent: modulus â‰ˆ 0.97, period â‰ˆ 12.7.
   * Others show lower modulus and shorter periods, contributing less to persistence.

3. **Simulating AR(2) with Complex Roots**:

   * Reciprocal root modulus 0.95, period 12 â†’ converted to AR coefficients (â‰ˆ 1.65, -0.902).
   * Simulated data shows quasi-periodic behavior.
   * ACF: decaying sinusoidal pattern.
   * PACF: significant at lags 1 and 2, then drops, consistent with AR(2).

4. **Simulating AR(2) with Real Roots**:

   * Roots: 0.95 and 0.5.
   * AR coefficients derived from these.
   * No quasi-periodic pattern in data; resembles damped random walk.
   * ACF: smooth decay.
   * PACF: only first two lags significant.

5. **Simulating AR(3) with Complex + Real Root**:

   * Complex root pair: modulus 0.95, period 12; real root: modulus 0.8.
   * Three AR coefficients derived.
   * Simulated series shows quasi-periodic behavior plus extra persistence.
   * ACF: still shows decaying periodicity.
   * PACF: more than two significant lags, consistent with AR(3).

**Key Insight**:

The modulus and type (real vs. complex) of reciprocal roots determine persistence and periodicity. The ACF reflects these traits, while the PACF helps identify AR order.


## Computing the roots of the AR polynomial ðŸ“–

Compute AR reciprocal roots given the AR coefficients



```{r}
#| label: ar-roots

# Assume the folloing AR coefficients for an AR(8)
phi=c(0.27, 0.07, -0.13, -0.15, -0.11, -0.15, -0.23, -0.14)
roots=1/polyroot(c(1, -phi)) # compute reciprocal characteristic roots
r=Mod(roots) # compute moduli of reciprocal roots
lambda=2*pi/Arg(roots) # compute periods of reciprocal roots

# print results modulus and frequency by decreasing order
print(cbind(r, abs(lambda))[order(r, decreasing=TRUE), ][c(2,4,6,8),]) 
```

## Simulating data from an AR(p) ðŸ“–

\index{AR(p)}
\index{ARIMA}

1.  R code to simulate data from an AR(2) with one pair of complex-valued reciprocal roots and plot the corresponding sample ACF and sample PACF

```{r}
#| label: ar-sim-complex-valued-roots

## simulate data from an AR(2)
set.seed(2021)
## AR(2) with a pair of complex-valued roots with modulus 0.95 and period 12 
r=0.95
lambda=12 
phi=numeric(2) 
phi[1]<- 2*r*cos(2*pi/lambda) 
phi[2] <- -r^2
phi
T=300 # number of time points
sd=1 # innovation standard deviation
yt=arima.sim(n=T, model = list(ar = phi), sd=sd)

par(mfrow = c(3, 1), mar = c(3, 4, 2, 1), cex.lab = 1.5)
## plot simulated data
ts.plot(yt)
## draw sample autocorrelation function
acf(yt, lag.max = 50,
    type = "correlation", ylab = "sample ACF", 
    lty = 1, ylim = c(-1, 1), main = " ")

## draw sample partial autocorrelation function
pacf(yt, lag.ma = 50, main = "sample PACF")
```

2.  R=code to simulate data from an AR(2) with two different real-valued reciprocal roots and plot the corresponding sample ACF and sample PACF

```{r}
#| label: ar-sim-real-valued-roots
### Simulate from AR(2) with two real reciprocal roots (e.g., 0.95 and 0.5)
set.seed(2021)
recip_roots=c(0.95, 0.5) ## two different real reciprocal roots
phi=c(sum(recip_roots), -prod(recip_roots)) ## compute ar coefficients
phi
T=300 ## set up number of time points
sd=1 ## set up standard deviation
yt=arima.sim(n=T,model = list(ar=phi),sd=sd) # generate ar(2)

par(mfrow = c(3, 1), mar = c(3, 4, 2, 1),  cex.lab = 1.5, cex.main = 1.5)
### plot simulated data 
ts.plot(yt)
### plot sample ACF
acf(yt, lag.max = 50, type = "correlation",  main = "sample ACF")
### plot sample PACF
pacf(yt, lag.max = 50, main = "sample PACF")
```

3.  R code to simulate data from an $AR(3)$ with one real reciprocal root and a pair of complex-valued reciprocal roots and plot the corresponding sample ACF and sample PACF

```{r}
#| label: ar-sim-ar3

### Simulate from AR(3) with one real root 
### and a pair of complex roots (e.g., r=0.95 and lambda = 12 and real root with
### 0.8 modulus)
set.seed(2021)
r= c(0.95, 0.95, 0.8) ## modulus
lambda=c(-12, 12) ## lambda
recip_roots=c(r[1:2]*exp(2*pi/lambda*1i), r[3]) ## reciprocal roots
phi <- numeric(3) # placeholder for phi
phi[1]=Re(sum(recip_roots)) # ar coefficients at lag 1
phi[2]=-Re(recip_roots[1]*recip_roots[2] + recip_roots[1]*recip_roots[3] + recip_roots[2]*recip_roots[3]) # ar coefficients at lag 2
phi[3]=Re(prod(recip_roots))
phi
T=300 # number of time points
sd=1 # standard deviation
yt=arima.sim(n=T,model = list(ar=phi), sd = sd) # generate ar(3)

par(mfrow = c(3,1),  mar = c(3, 4, 2, 1), cex.lab = 1.5, cex.main = 1.5)
### plot simulated data 
ts.plot(yt)
### plot sample ACF
acf(yt, lag.max = 50, type = "correlation",  main = "sample ACF")
### plot sample PACF
pacf(yt, lag.max = 50, main = "sample PACF")

```

## The AR(p): Review ðŸ“– {#sec-arp-review}

### AR(p): Definition, stability, and stationarity {#sec-arp-definition-stability-stationarity}

::: {.callout-info}

### AR(p) {.unnumbered}

A time series follows a zero-mean autoregressive process of order $p$, of AR(p), if:

$$
y_t = \phi_1 y_{t-1} + \phi_2 y_{t-2} + \ldots + \phi_p y_{t-p} + \epsilon_t \qquad
$$ {#eq-ar-p}

where $\phi_1, \ldots, \phi_p$ are the AR coefficients and $\epsilon_t$ is a white noise process 

with $\epsilon_t \sim \text{i.i.d. } N(0, v)$, for all $t$.

:::

The AR characteristic polynomial is given by

$$
\Phi(u) = 1 - \phi_1 u - \phi_2 u^2 - \ldots - \phi_p u^p,
$$

with $u$ complex-valued.

The AR(p) process is stable if $\phi(u) = 0$ only when $\|u\| > 1$. In this case, the process is also stationary and can be written as

$$
y_t = \psi(B) \epsilon_t = \sum_{j=0}^{\infty} \psi_j \epsilon_{t-j},
$$

with $\psi_0 = 1$ and $\sum_{j=0}^{\infty} |\psi_j| < \infty$. Here $B$ denotes the backshift operator, so $B^j \epsilon_t = \epsilon_{t-j}$ and

$$
\psi(B) = 1 + \psi_1 B + \psi_2 B^2 + \ldots + \psi_j B^j + \ldots
$$

The AR polynomial can also be written as

$$
\Phi(u) = \prod_{j=1}^{p} (1 - \alpha_j u),
$$

with $\alpha_j$ being the reciprocal roots of the characteristic polynomial. For the process to be stable (and consequently stationary), $|\alpha_j| < 1$ for all $j = 1, \ldots, p$.

### AR(p): State-space representation {#sec-arp-state-space-representation}

An AR(p) can also be represented using the following state-space or dynamic linear (DLM) model representation:

$$
y_t = F^{\top} x_t,
$$ {#eq-ar-p-state-space-y}

$$
x_t = G x_{t-1} + \omega_t,
$$ {#eq-ar-p-state-space-x}

with 

$$
x_t = (y_t, y_{t-1}, \dots, y_{t-p+1})^{\top}
$$ {#eq-ar-p-state-space-x-vector}

where F is a mapping from the state vector to the observed variable:

$$
F = (1, 0, \dots, 0)^{\top}
$$ {#eq-ar-p-state-space-f-vector}

$$
\omega_t = (\epsilon_t, 0, \dots, 0)^{\top}
$$ {#eq-ar-p-state-space-omega-vector}

\index{AR(p)!state transition matrix}
and state transition matrix G

$$
G = \begin{pmatrix}
\phi_1 & \phi_2 & \phi_3 & \dots & \phi_{p-1} & \phi_p \\
1 & 0 & 0 & \dots & 0 & 0 \\
0 & 1 & 0 & \dots & 0 & 0 \\
\vdots & \ddots & \ddots & \ddots & & \vdots \\
0 & 0 & 0 & \dots & 1 & 0
\end{pmatrix}.
$$ {#eq-ar-p-state-space-g-matrix}

\index{AR(p)!forecast function}
Using this representation, the expected behavior of the process in the future can be exhibited via the forecast function:

$$
f_t(h) = E(y_{t+h} \mid y_{1:t}) = F^\top G^h x_t, \quad h > 0, \quad \forall t \ge p
$$ {#eq-ar-p-forecast-function}

Where $G^h$ is the $h$-th power of the matrix $G$.
The eigenvalues of the matrix $G$ are the reciprocal roots of the characteristic polynomial.

::: {.callout-note}
### Eigenvalues {.unnumbered}

-   The eigenvalues can be real-valued or complex-valued.
-   If they are Complex-valued the eigenvalues/reciprocal roots appear in conjugate pairs.
:::

Assuming the matrix $G$ has $p$ distinct eigenvalues, we can decompose $G$ into $G = E \Lambda E^{-1}$, with

$$
\Lambda = \text{diag}(\alpha_1, \dots, \alpha_p),
$$

for a matrix of corresponding eigenvectors $E$. Then, $G^h = E \Lambda^h E^{-1}$ and we have:

$$
f_t(h) = \sum_{j=1}^{p} c_{tj} \alpha_j^h.
$$

### ACF of AR(p) {#sec-arp-acf}

For a general AR(p), the ACF is given in terms of the homogeneous difference equation:

$$
\rho(h) - \phi_1 \rho(h-1) - \ldots - \phi_p \rho(h-p) = 0, \quad h > 0.
$$

Assuming that $\alpha_1, \dots, \alpha_r$ denotes the characteristic reciprocal roots each with multiplicity $m_1, \ldots, m_r$, respectively, with $\sum_{i=1}^{r} m_i = p$. Then, the general solution is

$$
\rho(h) = \alpha_1^h p_1(h) + \ldots + \alpha_r^h p_r(h),
$$

with $p_j(h)$ being a polynomial of degree $m_j - 1$.

### Example: AR(1) {#sec-arp-example-ar1}

We already know that for $h \ge 0$, $\rho(h) = \phi^h$. Using the result above, we have

$$
\rho(h) = a \phi^h,
$$

and so to find $a$, we take $\rho(0) = 1 = a \phi^0$, hence $a = 1$.

### Example: AR(2) {#sec-arp-example-ar2}

Similarly, using the result above in the case of two complex-valued reciprocal roots, we have

$$
\rho(h) = a \alpha_1^h + b \alpha_2^h = c r^h \cos(\omega h + d).
$$


### PACF of AR(p) {#sec-arp-pacf}

\index{PACF}
\index{AR(p)!PACF}
\index{Durbin-Levinson}
We can use the Durbin-Levinson recursion to obtain the PACF of an AR(p). c.f. @sec-durbin-levinson.

Using the same representation but substituting the true autocovariances and autocorrelations with their sampled versions, we can also obtain the sample PACF.

It is possible to show that the PACF of an AR(p) is equal to zero for $h > p$.

