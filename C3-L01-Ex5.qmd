---
title : 'Basic Concepts of Mixture Models'
subtitle : 'Bayesian Statistics: Mixture Models'
categories:
  - Bayesian Statistics
keywords:
  - Mixture Models
  - Homework
---

## HW - Simulation of Poisson mixture model


::: {.callout-note}
### Instructions

- Modify the code above to sample 200 random numbers from a mixture of 3 Poisson distributions with means 1, 2 and 6 and weights 0.7, 0.2 and 0.1, respectively, 
- generate a barplot with the empirical frequencies of all the integers included in the sample.
:::

```{r}
#| label: fig-poisson-mix
# Generate n observations from a mixture of three poisson distributions
set.seed(452)


# n     = 50
n = 200                # sample size
# w     = c(0.6, 0.4)  # Weights
w = c(0.7,0.2,0.1)     # weights
# mu    = c(0, 5)      # Means
# sigma = c(1, 2)      # Standard deviations
lambda = c(1,2,6)      # lambda params (mean,variation)



#cc    = sample(1:2, n, replace=T, prob=w)
ac     = sample(1:length(w),n, replace=T, prob=w) # sample the active component
#x     = rnorm(n, mu[cc], sigma[cc])
x      = rpois(n,lambda=lambda[ac])                # simulate an ac mixture component n time


#First converting the vector x into a factor while ensuring that any integer between 0 and the maximum in the sample are valid factors avoids the issue of ignoring zero counts or x=0.

#empfreq = table(factor(x, levels=seq(0, max(x))))/n
empirical_feqs = table(factor(x, levels=seq(0, max(x)))) # tabulate samples into a counts
empirical_dist = empirical_feqs /n # convert frequencies to probabilities
```

Plot the empirical distribution

```{r}
#| label: fig-poisson-mix-1
#| fig-cap: "Empirical distribution for Poisson mixture"
par(mar=c(4,4,1,1) + 0.1)
#barplot(empfreq)
barplot(empirical_dist,xlab="counts",ylab="probability",main="Empirical distribution for Poisson mixture")

```



```{r}
#| label: lbl-poisson-mix-2
set.seed(42)

n = 1000                  # Larger sample size
w = c(0.3, 0.25, 0.25, 0.2)  # Weights
mu = c(1, 4, 7, 10)       # Means
rates = 1 / mu            # Rates for exponential distributions

cc = sample(1:4, n, replace=TRUE, prob=w)
x = rexp(n, rate=rates[cc])

sample_mean = mean(x)
sample_var = var(x)

theoretical_mean = sum(w * mu)
theoretical_variance = sum(w * (mu^2 + (mu - theoretical_mean)^2))

cat("Sample Mean:", sample_mean, "\n")
cat("Sample Variance:", sample_var, "\n")
cat("Theoretical Mean:", theoretical_mean, "\n")
cat("Theoretical Variance:", theoretical_variance, "\n")
```
