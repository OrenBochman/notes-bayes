---
title: ts types
---

```{python}
import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import solve_ivp
from scipy.signal import lfilter

# Time axis
n=5000
t = np.linspace(0, 100, n)

# Periodic: simple sine
periodic = np.sin(2 * np.pi * 0.1 * t)

omega = 2 * np.pi / 30  # Incommensurate w.r.t. sampling
r = 0.99
phi = [1, -2 * r * np.cos(omega), r**2]  # AR(2) coefficients

noise = np.random.normal(0, 1, n)
quasiperiodic = lfilter([1], phi, noise)



# Chaotic: Lorenz attractor x(t)
def lorenz(t, state, sigma=10, beta=8/3, rho=28):
    x, y, z = state
    return [sigma * (y - x), x * (rho - z) - y, x * y - beta * z]

sol = solve_ivp(lorenz, [0, 100], [1, 1, 1], t_eval=t)
chaotic = sol.y[0]

# Stochastic: random walk
np.random.seed(0)
stochastic = np.cumsum(np.random.normal(0, 1, len(t)))

# Plotting
fig, axs = plt.subplots(4, 1, figsize=(10, 8), sharex=True)

axs[0].plot(t, periodic)
axs[0].set_title("Periodic")

axs[1].plot(t, quasiperiodic)
axs[1].set_title("Quasi-Periodic")

axs[2].plot(t, chaotic)
axs[2].set_title("Chaotic (Lorenz)")

axs[3].plot(t, stochastic)
axs[3].set_title("Stochastic (Random Walk)")

plt.xlabel("Time")
plt.tight_layout()
plt.show()

```