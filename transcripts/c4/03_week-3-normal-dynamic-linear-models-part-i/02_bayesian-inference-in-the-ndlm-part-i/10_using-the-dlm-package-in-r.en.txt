[MUSIC] So here I'm going to show you how
to use the dlm package to fit these dynamic linear models as well. So the dlm is package that
is available from Cran. And it allows you to compute
the filtering smoothing and forecasting equations for
dynamic linear models. So I'm just going to show you how
to do the same thing we've been doing with the code that I provided
just using the dlm package. So I'm going to just run here
the first examples that we ran. And I'm going to show you
how to do the same again. So here, I'm just going
through the Lake Huron data. So just setting up
everything as we did before. And then going through the filtering and
smoothing equations. And so we can now plot the results and
just want to have all the results here. So we have the red line corresponds
to the posterior mean for the distribution of thetat
given the Dt using a first order polynomial
model to fit the data. And the blue line corresponds
to the smoothing mean. So the mean of the posterior distribution
of the smoothing equations here. So now we can look at how to
fit this with the dlm package. So you have to call, install the package
if you don't have it installed. And then just call that library once
you have installed the package. And the dlm package has a different set of
functions to construct the model first. So I'm going to use the function
that is called the dlmModPoly, which allows you to
fit polynomial models. So it constructs the polynomial models. The default function as you can
see here is a function in that assumes that the polynomial
model is of order 2. So here I want to polynomial
model of all the 1. And then I'm going to specify
the variance at the observational level, which is called dV in that package. dW is the variance at the evolution level. And then I have my prior mean for theta and the prior variance. I'm just using exactly
the same prior distribution. And the package provides two
functions of the dlm filter function allows you to providing the data. And the model that you just define computes the filtering
recursions  here. And then there is another function
that is called the dlmSmooth that you essentially pass the results
of the filtering equations. And then you obtain
the smoothing distributions. So we're just going to do that. And now I'm going to plot the results that
I obtained from those filtering equations. One thing that you can see here,
if I do names of, let's say results_filter_dlm. You can see that the way
in which the dlm functions from the dlm package keep the results. It has a particular format. So in the case of the dlm package, you're going to have the information
about what model you fitted. Then you have the mean of theta_t given
Dt is kept in this m object. And then you have a is the prior
mean of theta_t, given the t -1. And then f is the mean of the one
step ahead forecast distribution. And then you have these U.C, D.C, U.R, D.R, those are just decompositions
of the C variance matrix. So each of the Cs at time t. And then if you have also
the composition of the R matrices. So the model, the way in which the functions
are implemented in this dlm package. Assume used an SVD decomposition
of all the matrices. So you have to keep in mind if you're
going to recover the structure here for the different components in the model. You have to keep this in mind. So for the filtering results,
this is the structure. If you do names of the results, smooth, with the dlm package. You're going to have again,
here is the mean here that is called S and then you have the decomposition
of the matrix as well. So, I'm just going to plot now for
the filtering results. I'm just going to plot the mean here. And then for the smoothing distribution,
I'm also going to plot that means. In this case, we're working with
the first order polynomial. So the dimension of the state vector is 1. So you can see that we obtain
exactly the same results. And you can compare them numerically. The upper plot corresponds to
the results we get with the code that we've been using. And the second block corresponds to just
using the code from the dlm package. We can also run the example with
the second order polynomial. So again, if I use the specification
of the model that we use before with the functions
that we described. I can keep my results there. And if I use the dlm package,
I can use again, this is a second order polynomial model. I say that the order of the polynomial
is 2, I use this dlmModPoly function. I specify the observational variance,
the system variance m0 and C0. So I'm using exactly the same
priors in this case. And then I use the dlm filter function and
the dlm smooth just to compute the moments of the filtering and
smoothing distributions. And then I can plot everything here. We are plotting just
the first component here. The posterior distribution for
the first component of the theta vector. Which also corresponds to
the expected value of the yt. And then if I do the same
with the dlm package, you can see that you
obtain the same results. So again, the upper plot
corresponds to the results that we get from the code
that we've been using. And then the bottom plot corresponds
to the results that we get from the dlm package. So I just wanted to illustrate this. You're welcome to always
use the dlm package. Just keep in mind the structure in
which the matrices are kept is a little bit different than what
we have been discussing. Because the dlm package uses and SVD decomposition of the covariance
matrices and keeps everything like that. So there are some differences. But you can also use this
package to obtain inference in the case of dynamic linear models. [MUSIC]